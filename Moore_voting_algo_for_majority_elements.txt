For finding elements that appear more than n/3 times, a modified version of Moore's Voting Algorithm can be used, where you maintain two potential candidates
(since there can be at most two such elements). Hereâ€™s how it works:
#include <iostream>
#include <vector>

using namespace std;

vector<int> majorityElement(vector<int>& nums) {
    int n = nums.size();
    int candidate1 = 0, candidate2 = 1, count1 = 0, count2 = 0;

    for (int num : nums) {
        if (num == candidate1) {
            count1++;
        } else if (num == candidate2) {
            count2++;
        } else if (count1 == 0) {
            candidate1 = num;
            count1 = 1;
        } else if (count2 == 0) {
            candidate2 = num;
            count2 = 1;
        } else {
            count1--;
            count2--;
        }
    }

    count1 = count2 = 0;
    for (int num : nums) {
        if (num == candidate1) count1++;
        else if (num == candidate2) count2++;
    }

    vector<int> result;
    if (count1 > n / 3) result.push_back(candidate1);
    if (count2 > n / 3) result.push_back(candidate2);

    return result;
}

int main() {
    vector<int> nums = {3, 2, 3};
    vector<int> result = majorityElement(nums);

    for (int x : result) {
        cout << x << " ";
    }
    cout << endl;

    return 0;
}
