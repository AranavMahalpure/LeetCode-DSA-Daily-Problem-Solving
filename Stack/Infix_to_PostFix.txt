
//for the infix to postfix

 pseudo Code 
2. Conversion Rules:
We use a stack to help with operator precedence and parentheses. Follow these steps:

Operands: Output them immediately (they stay in the same order).
Left Parenthesis (: Push it onto the stack.
Right Parenthesis ): Pop from the stack to the output until you find a left parenthesis (, which is discarded.
Operators (+, -, *, /, ^):
Pop from the stack to the output if the precedence of the operator on top of the stack is greater than or equal to the current operator.
Push the current operator onto the stack.
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

string infixToPostfix(string infix) {
    stack<char> s;
    string postfix = "";
    for (char ch : infix) {
        if (isalnum(ch)) {
            postfix += ch;
        } else if (ch == '(') {
            s.push(ch);
        } else if (ch == ')') {
            while (!s.empty() && s.top() != '(') {
                postfix += s.top();
                s.pop();
            }
            s.pop();  // Remove '('
        } else {  // Operator
            while (!s.empty() && precedence(s.top()) >= precedence(ch)) {
                postfix += s.top();
                s.pop();
            }
            s.push(ch);
        }
    }
    // Pop remaining operators
    while (!s.empty()) {
        postfix += s.top();
        s.pop();
    }
    return postfix;
}  
